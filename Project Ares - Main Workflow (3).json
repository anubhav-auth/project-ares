{
  "name": "Project Ares - Main Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1824,
        -272
      ],
      "id": "26de02fa-58a7-4657-b0cc-c3b54b6c6ef2"
    },
    {
      "parameters": {
        "url": "https://www.foundit.in/search/software-engineer-jobs-in-pune",
        "options": {}
      },
      "name": "1. Scrape Job Board",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1616,
        -80
      ],
      "id": "13442c4e-1267-4fb6-b8c9-bab185cbce0d"
    },
    {
      "parameters": {
        "jsCode": "const html = $input.all()[0].json.data;\nconst scriptRegex = /<script type=\\\"application\\/ld\\+json\\\">([\\s\\S]*?)<\\/script>/;\nconst match = html.match(scriptRegex);\nif (match && match[1]) {\n  try {\n    const jsonData = JSON.parse(match[1]);\n    if (jsonData['@type'] === 'ItemList' && jsonData.itemListElement) {\n      return jsonData.itemListElement.map(item => ({\n        json: {\n          jobTitle: item.name,\n          location: item.jobLocation?.address?.addressLocality,\n          jobDescriptionText: item.description,\n          url: item.url,\n          image: item.image,\n          companyName: item.hiringOrganization?.name\n        }\n      }));\n    }\n  } catch (e) {\n    return [];\n  }\n}\nreturn [];"
      },
      "name": "2. Parse HTML for Jobs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        -80
      ],
      "id": "16e9d2f1-4731-4e00-bb57-a5600c002d53"
    },
    {
      "parameters": {
        "jsCode": "// 3. Standardize Job JSON (Final Version with Individual Page Fetch)\nconst items = $input.all();\n\n// Helper to format the final company name nicely\nfunction toTitleCase(str) {\n  if (!str) return '';\n  // Cleans up and capitalizes the name\n  return str.replace(/[^a-zA-Z0-9\\s]/g, ' ').trim().replace(\n    /\\w\\S*/g,\n    txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\n}\n\n// We will process all items, but we need to make individual HTTP requests.\n// n8n's code node doesn't easily support async/await for HTTP calls,\n// so the best practice is to output the URLs to a new HTTP Request node.\n// However, let's try a more advanced technique to see if we can do it in one go.\n\n// This is an advanced approach. It requires enabling the 'got' library in your n8n instance.\n// If this fails, we will revert to a simpler two-node approach.\nconst output = [];\nfor (const item of items) {\n  const json = item.json;\n  let companyName = json.companyName; // Use the name from the list page if available\n\n  // If the company name is missing from the initial scrape, fetch the individual job page\n  if (!companyName) {\n    try {\n      // NOTE: This is a placeholder. n8n's standard Code node cannot make HTTP requests.\n      // The correct way is to pass this URL to a subsequent HTTP Request node.\n      // For now, we will revert to the most reliable string parsing we can.\n      const urlParts = json.url.split('/');\n      const slug = urlParts[urlParts.length - 1];\n      const slugWithoutId = slug.replace(/-\\d+$/, '');\n      const slugParts = slugWithoutId.split('-');\n      \n      // Let's take the longest word from the parts that are not the job title or location\n      const titleParts = json.jobTitle.toLowerCase().split(/[^a-z0-9]/).filter(Boolean);\n      const locationParts = (json.location || '').toLowerCase().split(/[^a-z0-9]/).filter(Boolean);\n      const potentialCompanyParts = slugParts.filter(p => !titleParts.includes(p) && !locationParts.includes(p));\n      \n      if (potentialCompanyParts.length > 0) {\n        companyName = toTitleCase(potentialCompanyParts.join(' '));\n      }\n\n    } catch (e) {\n      // fallback\n    }\n  }\n\n  // Final fallback\n  if (!companyName) {\n    companyName = 'Unknown Company';\n  }\n\n  const jobIdMatch = json.url.match(/(\\d+)$/);\n  const jobId = jobIdMatch ? jobIdMatch[1] : null;\n\n  const dossierObject = {\n    jobDescriptionUrl: json.url,\n    location: json.location,\n    jobDescriptionText: json.jobDescriptionText\n  };\n\n  output.push({\n    json: {\n      jobId: 'foundit_' + jobId,\n      jobTitle: json.jobTitle,\n      companyName: companyName,\n      source: 'foundit.in',\n      status: 'NOTIFIED',\n      dossier: JSON.stringify(dossierObject)\n    }\n  });\n}\n\nreturn output;"
      },
      "name": "3. Standardize Job JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1184,
        -80
      ],
      "id": "244d0be3-03cb-45ed-8953-b77436b411cc"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://analytics-service:8080/api/applications",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "name": "4. Log 'NOTIFIED' to DB",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -960,
        -80
      ],
      "id": "8ed5642f-7801-42eb-bfc5-6fb14db4acdc"
    },
    {
      "parameters": {
        "filePath": "/home/node/config/profiles.yaml"
      },
      "name": "5a. Read Profiles.yaml",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        -960,
        -272
      ],
      "id": "ff8a59cf-56c3-40f3-a38b-ef8834bfc067"
    },
    {
      "parameters": {
        "jsCode": "// 5b. Triage Job (Definitive Version with all Checks)\nconst yaml = require('js-yaml');\n\n// Get ALL the jobs from the first input (index 0)\nconst allJobs = $input.all(0);\n\n// Get the YAML file content from the second input (index 1)\nconst profilesYaml = $input.all(1)[0].json.data;\nconst profiles = yaml.load(profilesYaml);\n\n// Use .map() to process EACH job individually\nconst results = allJobs.map(item => {\n  const job = item.json;\n  let action = 'simple_alert'; // Default action\n\n  for (const profile of profiles) {\n    let match = true;\n\n    // --- All Matching Logic ---\n\n    // Check companies if they exist in the profile\n    if (match && profile.companies) {\n      if (!job.companyName || !profile.companies.some(company => job.companyName.toLowerCase().includes(company.toLowerCase()))) {\n        match = false;\n      }\n    }\n\n    // Check locations\n    if (match && profile.locations) {\n      try {\n        const jobLocation = JSON.parse(job.dossier).location || '';\n        if (!jobLocation || !profile.locations.some(loc => jobLocation.toLowerCase().includes(loc.toLowerCase()))) {\n          match = false;\n        }\n      } catch (e) {\n        match = false; // Dossier parsing failed\n      }\n    }\n\n    // Check roles\n    if (match && profile.roles) {\n      if (!job.jobTitle || !profile.roles.some(role => job.jobTitle.toLowerCase().includes(role.toLowerCase()))) {\n        match = false;\n      }\n    }\n\n    // Check sources\n    if (match && profile.sources) {\n      if (!job.source || !profile.sources.some(src => job.source.toLowerCase().includes(src.toLowerCase()))) {\n        match = false;\n      }\n    }\n\n    // Check for excluded roles\n    if (match && profile.exclude_roles) {\n      if (job.jobTitle && profile.exclude_roles.some(role => job.jobTitle.toLowerCase().includes(role.toLowerCase()))) {\n        match = false;\n      }\n    }\n\n    // --- End Matching Logic ---\n\n    // If all checks passed, assign the action and break\n    if (match) {\n      action = profile.action;\n      break;\n    }\n  }\n\n  // Attach the determined action to the job object\n  job.action = action;\n  \n  // Return the object in the format n8n expects\n  return { json: job };\n});\n\n// Return the array of processed job objects\nreturn results;"
      },
      "name": "5b. Triage Job",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        -80
      ],
      "id": "f22fecad-f07a-4916-90b6-b3d91e8a4301"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "value2": "full_auto_apply"
            }
          ]
        }
      },
      "name": "6. Route by Action",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -96,
        -80
      ],
      "id": "8a7b310b-7ea1-4d32-b8a7-deee5b6b5f92"
    },
    {
      "parameters": {
        "url": "http://ai-service:8001/api/generate-standard-coverletter",
        "options": {}
      },
      "name": "7a. Generate Cover Letter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        -176
      ],
      "id": "e33c3ee3-ebc6-4e10-af0e-75b95c68da6d",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const jobData = $input.all('main', 0)[0].json;\nconst coverLetterData = $input.all('main', 1)[0].json;\n\nconst applicationUrl = JSON.parse(jobData.dossier).jobDescriptionUrl;\n\n// Basic payload for the automation service\n// In a real scenario, you'd map more fields from your user profile\nconst payload = {\n  application_url: applicationUrl,\n  job_id: jobData.jobId,\n  answers: {\n    \"name\": \"Ares Applicant\",\n    \"email\": \"applicant@project-ares.dev\",\n    \"cover_letter\": coverLetterData.cover_letter\n  }\n};\n\n// Pass along the database ID for the final update step\npayload.db_id = jobData.id;\n\nreturn payload;"
      },
      "name": "7b. Prepare Apply Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        -176
      ],
      "id": "8e0a139e-c649-40ad-9d83-aecc9a2738a4"
    },
    {
      "parameters": {
        "url": "http://automation-service:8000/apply/submit",
        "options": {}
      },
      "name": "7c. Submit Application",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        352,
        -176
      ],
      "id": "7cc8643d-3b0c-40b7-8d5e-915f4b4c629c"
    },
    {
      "parameters": {
        "url": "=http://analytics-service:8080/api/applications/{{$json.db_id}}",
        "options": {}
      },
      "name": "7d. Update DB to 'APPLIED'",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        576,
        -176
      ],
      "id": "13e79df4-0a54-4435-ac8b-363925fb5f9d"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://webhook-test.com/bb5c8547cd265feacac55cd3a762e992",
        "responseFormat": "string",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json}}"
      },
      "name": "Send Simple Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        128,
        128
      ],
      "id": "65f1048a-c54e-4412-ad5d-fccfb2645de1",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "1. Scrape Job Board",
            "type": "main",
            "index": 0
          },
          {
            "node": "5a. Read Profiles.yaml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Scrape Job Board": {
      "main": [
        [
          {
            "node": "2. Parse HTML for Jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Parse HTML for Jobs": {
      "main": [
        [
          {
            "node": "3. Standardize Job JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Standardize Job JSON": {
      "main": [
        [
          {
            "node": "4. Log 'NOTIFIED' to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Log 'NOTIFIED' to DB": {
      "main": [
        [
          {
            "node": "5b. Triage Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5b. Triage Job": {
      "main": [
        [
          {
            "node": "6. Route by Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6. Route by Action": {
      "main": [
        [
          {
            "node": "7a. Generate Cover Letter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Simple Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7b. Prepare Apply Payload": {
      "main": [
        [
          {
            "node": "7c. Submit Application",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7c. Submit Application": {
      "main": [
        [
          {
            "node": "7d. Update DB to 'APPLIED'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5a. Read Profiles.yaml": {
      "main": [
        [
          {
            "node": "5b. Triage Job",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4646ff92-b02c-4647-aa9d-19f70faa38e9",
  "meta": {
    "instanceId": "5a1bc7bdbda79678da2361de6bc7c91cd90d534cd561a00733a95bb182b8c298"
  },
  "id": "oonZDIXY7uysNZ0x",
  "tags": []
}